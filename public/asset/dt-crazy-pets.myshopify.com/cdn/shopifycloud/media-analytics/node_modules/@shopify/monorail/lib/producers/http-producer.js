"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var uuid = require("uuid");
var Endpoints = require("../config/endpoints");
var producer_errors_1 = require("./producer-errors");
var HttpProducer = /** @class */ (function () {
  function HttpProducer(edgeDomain) {
    if (edgeDomain === void 0) {
      edgeDomain = Endpoints.DEVELOPMENT_DOMAIN;
    }
    this.edgeDomain = edgeDomain;
  }
  HttpProducer.withEndpoint = function (edgeEndpoint) {
    return new HttpProducer(Endpoints.extractDomain(edgeEndpoint));
  };
  HttpProducer.getHeadersFromMetadata = function (metadata) {
    var headers = {
      "Content-Type": "application/json; charset=utf-8",
      "X-Monorail-Edge-Event-Created-At-Ms": (
        (metadata && metadata.eventCreatedAtMs) ||
        Date.now()
      ).toString(),
      "X-Monorail-Edge-Event-Sent-At-Ms": Date.now().toString(),
      "X-Monorail-Edge-Client-Message-Id": (
        (metadata && metadata.clientMessageId) ||
        uuid.v4()
      ).toString(),
    };
    if (metadata && metadata.userAgent) {
      headers["User-Agent"] = metadata.userAgent;
    }
    return headers;
  };
  HttpProducer.prototype.produceBatch = function (monorailEvent) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var body, edgeResponse, error_1, response, _a, _b;
      return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            body = {
              events: this.convertAllEventsToUnderscoreCase(monorailEvent),
              metadata: this.toUnderscoreCase(monorailEvent.metadata),
            };
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            return [
              4 /*yield*/,
              fetch(this.produceBatchEndpoint(), {
                method: "post",
                headers: HttpProducer.getHeadersFromMetadata(
                  monorailEvent.metadata
                ),
                body: JSON.stringify(body),
              }),
            ];
          case 2:
            edgeResponse = _c.sent();
            return [3 /*break*/, 4];
          case 3:
            error_1 = _c.sent();
            throw new producer_errors_1.MonorailRequestError(error_1);
          case 4:
            if (!(edgeResponse.status === 207)) return [3 /*break*/, 6];
            return [4 /*yield*/, edgeResponse.json()];
          case 5:
            response = _c.sent();
            throw new producer_errors_1.MonorailBatchProduceError(response);
          case 6:
            if (!!edgeResponse.ok) return [3 /*break*/, 8];
            _a = producer_errors_1.MonorailUnableToProduceError.bind;
            _b = {
              status: edgeResponse.status,
            };
            return [4 /*yield*/, edgeResponse.text()];
          case 7:
            throw new (_a.apply(
              producer_errors_1.MonorailUnableToProduceError,
              [void 0, ((_b.message = _c.sent()), _b)]
            ))();
          case 8:
            return [2 /*return*/, { status: edgeResponse.status }];
        }
      });
    });
  };
  HttpProducer.prototype.produce = function (monorailEvent) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var body, edgeResponse, error_2, _a, _b;
      return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            body = {
              schema_id: monorailEvent.schemaId,
              payload: this.toUnderscoreCase(monorailEvent.payload),
            };
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            return [
              4 /*yield*/,
              fetch(this.produceEndpoint(), {
                method: "post",
                headers: HttpProducer.getHeadersFromMetadata(
                  monorailEvent.metadata
                ),
                body: JSON.stringify(body),
              }),
            ];
          case 2:
            edgeResponse = _c.sent();
            return [3 /*break*/, 4];
          case 3:
            error_2 = _c.sent();
            throw new producer_errors_1.MonorailRequestError(error_2);
          case 4:
            if (!edgeResponse) {
              throw new producer_errors_1.MonorailUnableToProduceError({
                message: "No response from edge",
              });
            }
            if (!!edgeResponse.ok) return [3 /*break*/, 6];
            _a = producer_errors_1.MonorailUnableToProduceError.bind;
            _b = {
              status: edgeResponse.status,
            };
            return [4 /*yield*/, edgeResponse.text()];
          case 5:
            throw new (_a.apply(
              producer_errors_1.MonorailUnableToProduceError,
              [void 0, ((_b.message = _c.sent()), _b)]
            ))();
          case 6:
            return [2 /*return*/, { status: edgeResponse.status }];
        }
      });
    });
  };
  HttpProducer.prototype.produceBatchEndpoint = function () {
    return this.edgeDomain + Endpoints.PRODUCE_BATCH_ENDPOINT;
  };
  HttpProducer.prototype.produceEndpoint = function () {
    return this.edgeDomain + Endpoints.PRODUCE_ENDPOINT;
  };
  HttpProducer.prototype.convertAllEventsToUnderscoreCase = function (
    monorailEvent
  ) {
    var _this = this;
    return monorailEvent.events.map(function (event) {
      return {
        schema_id: event.schemaId,
        payload: _this.toUnderscoreCase(event.payload),
        metadata: _this.toUnderscoreCase(event.metadata),
      };
    });
  };
  HttpProducer.prototype.toUnderscoreCase = function (object) {
    var _this = this;
    if (object) {
      return Object.keys(object)
        .map(function (key) {
          var _a;
          return (
            (_a = {}),
            (_a[_this.convertStringToUnderscoreCase(key)] = object[key]),
            _a
          );
        })
        .reduce(function (prev, next) {
          return tslib_1.__assign({}, prev, next);
        });
    }
    return object;
  };
  HttpProducer.prototype.convertStringToUnderscoreCase = function (
    camelCaseString
  ) {
    return camelCaseString
      .split(/(?=[A-Z])/)
      .join("_")
      .toLowerCase();
  };
  return HttpProducer;
})();
exports.HttpProducer = HttpProducer;
