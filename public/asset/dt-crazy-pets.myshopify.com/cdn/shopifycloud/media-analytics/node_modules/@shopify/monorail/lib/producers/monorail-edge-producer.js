"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Endpoints = require("../config/endpoints");
var http_producer_1 = require("./http-producer");
var log_producer_1 = require("./log-producer");
var producer_middleware_1 = require("../middleware/producer-middleware");
var uuid = require("uuid");
var Monorail = /** @class */ (function () {
  function Monorail(producer, middleware) {
    this.producer = producer;
    this.middleware = middleware;
    this.executeChain = Monorail.buildMiddlewareChain(
      this.middleware.concat(
        new producer_middleware_1.ProducerMiddleware(producer)
      )
    );
  }
  Monorail.createLogProducer = function (config) {
    return new Monorail(
      new log_producer_1.LogProducer(config.debugMode),
      config.middleware || []
    );
  };
  Monorail.createHttpProducerWithEndpoint = function (
    edgeEndpoint,
    middleware
  ) {
    if (middleware === void 0) {
      middleware = [];
    }
    return new Monorail(
      http_producer_1.HttpProducer.withEndpoint(edgeEndpoint),
      middleware
    );
  };
  Monorail.createHttpProducer = function (config) {
    return new Monorail(
      config.production
        ? new http_producer_1.HttpProducer(Endpoints.PRODUCTION_DOMAIN)
        : new http_producer_1.HttpProducer(Endpoints.DEVELOPMENT_DOMAIN),
      config.middleware || []
    );
  };
  Monorail.buildMiddlewareChain = function (middleware, index) {
    var _this = this;
    if (index === void 0) {
      index = 0;
    }
    if (index === middleware.length) {
      return this.identityFn;
    }
    return function (event) {
      return middleware[index].do(
        event,
        _this.buildMiddlewareChain(middleware, index + 1)
      );
    };
  };
  Monorail.prototype.produce = function (monorailEvent) {
    monorailEvent.metadata = tslib_1.__assign(
      { eventCreatedAtMs: Date.now(), clientMessageId: uuid.v4() },
      monorailEvent.metadata
    );
    return this.executeChain(monorailEvent);
  };
  Monorail.prototype.produceBatch = function (monorailBatchEvent) {
    return this.executeChain(monorailBatchEvent);
  };
  return Monorail;
})();
exports.Monorail = Monorail;
